version: 1
able_existing_loggers:
console:
    fl_requirments:
        numpy
        pandas
        pynvml
        tqdm
        scikit-learn
        munch
        seaborn
        matplotlib

        torch>=1.7.1
        torchvision>=0.8.2
        
handlers:
    info_RF_handler:
        number of trees: n_estimators=50
        maximum tree depth: max_depth=10
        minimum number of samples for a split: min_samples_split=5
        maximum number of features per tree: max_features=sqrt
        tree operator: criterion_custom = 'gini'
        random_state: ['random_state=42']
        formatter: fl_std
        stream: ext://sys.stdout

    info_FNN_handler(nn.Module):
    def __init__(self, input_size):
        super(ANNModel, self).__init__()
        self.fc1 = nn.Linear(input_size, 64)
        self.fc2 = nn.Linear(64, 32)
        self.fc3 = nn.Linear(32, 1)
        function activation: LeakyReLU (α = 0.1),)
        DataLoader: (train_dataset, batch_size=32, shuffle=True)
        optimizer: optim.Adam(model.parameters(), learning rate=0.1)
        cross-Entropy loss: criterion = nn.BCELoss() 
        hidden layers: ['2','100']
        formatter: fl_std
        epochs: num_epochs = 10
        pool: pred_probs >= 0.5
        formatter: fl_std
        
    info_CNN_handler(nn.Module):
    def __init__(self):
        super(CNNModel, self).__init__()
        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, padding=1)
        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, padding=1)
        self.pool = nn.AdaptiveAvgPool2d(1)
        self.fc = nn.Linear(32, 1)
        function activation: LeakyReLU (α = 0.1),)
        optimizer: optim.Adam(model.parameters(), learning rate=0.1)
        Define: transformations
        transform = transforms.Compose([
        transforms.Resize((32, 32)),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
        ])model = CNNModel()
        cross-Entropy loss: criterion = nn.BCELoss() 
        epochs: num_epochs = 10
        pool: pred_probs >= 0.5
        filters: ['32']
        formatter: fl_std

loggers:
    ibmfl:
        level: INFO
        handlers: [console, info_RF_handler, error_FNN_handler, error_CNN_handler]
        propagate: no

root:
    level: INFO
    handlers: [console, info_file_handler, error_file_handler]